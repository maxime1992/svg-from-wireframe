import { combineLatest, from } from 'rxjs';
import { map } from 'rxjs/operators';
export class MeshToSvg {
    run(input$) {
        return combineLatest([from(import('mesh-to-svg')), input$]).pipe(map(([wasm, input]) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
            const wasmSvg = wasm.mesh_to_svg_lines(input.sourceWidth, input.sourceHeight, input.mesh.indices, input.mesh.positions, input.mesh.normals, (_a = input.wireframe) === null || _a === void 0 ? void 0 : _a.indices, (_b = input.wireframe) === null || _b === void 0 ? void 0 : _b.positions, input.sceneViewMatrix, input.sceneProjectionMatrix, input.meshWorldMatrix, (_c = input.svgConfig) === null || _c === void 0 ? void 0 : _c.width, (_d = input.svgConfig) === null || _d === void 0 ? void 0 : _d.height, (_e = input.svgConfig) === null || _e === void 0 ? void 0 : _e.margin, (_g = (_f = input.svgConfig) === null || _f === void 0 ? void 0 : _f.visible) === null || _g === void 0 ? void 0 : _g.strokeWidth, (_j = (_h = input.svgConfig) === null || _h === void 0 ? void 0 : _h.visible) === null || _j === void 0 ? void 0 : _j.color, ((_k = input.svgConfig) === null || _k === void 0 ? void 0 : _k.obscured) === null, (_m = (_l = input.svgConfig) === null || _l === void 0 ? void 0 : _l.obscured) === null || _m === void 0 ? void 0 : _m.strokeWidth, (_p = (_o = input.svgConfig) === null || _o === void 0 ? void 0 : _o.obscured) === null || _p === void 0 ? void 0 : _p.color, (_q = input.svgConfig) === null || _q === void 0 ? void 0 : _q.fitLines);
            return wasmSvg;
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzaC10by1zdmcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly93aXJlZnJhbWUtdG8tc3ZnLyIsInNvdXJjZXMiOlsibGliL21lc2gtdG8tc3ZnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdyQyxNQUFNLE9BQU8sU0FBUztJQUNiLEdBQUcsQ0FBQyxNQUEwQztRQUNuRCxPQUFPLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDOUQsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTs7WUFDcEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUNwQyxLQUFLLENBQUMsV0FBVyxFQUNqQixLQUFLLENBQUMsWUFBWSxFQUNsQixLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFDbEIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQ3BCLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxRQUNsQixLQUFLLENBQUMsU0FBUywwQ0FBRSxPQUFPLFFBQ3hCLEtBQUssQ0FBQyxTQUFTLDBDQUFFLFNBQVMsRUFDMUIsS0FBSyxDQUFDLGVBQWUsRUFDckIsS0FBSyxDQUFDLHFCQUFxQixFQUMzQixLQUFLLENBQUMsZUFBZSxRQUNyQixLQUFLLENBQUMsU0FBUywwQ0FBRSxLQUFLLFFBQ3RCLEtBQUssQ0FBQyxTQUFTLDBDQUFFLE1BQU0sUUFDdkIsS0FBSyxDQUFDLFNBQVMsMENBQUUsTUFBTSxjQUN2QixLQUFLLENBQUMsU0FBUywwQ0FBRSxPQUFPLDBDQUFFLFdBQVcsY0FDckMsS0FBSyxDQUFDLFNBQVMsMENBQUUsT0FBTywwQ0FBRSxLQUFLLEVBQy9CLE9BQUEsS0FBSyxDQUFDLFNBQVMsMENBQUUsUUFBUSxNQUFLLElBQUksY0FDbEMsS0FBSyxDQUFDLFNBQVMsMENBQUUsUUFBUSwwQ0FBRSxXQUFXLGNBQ3RDLEtBQUssQ0FBQyxTQUFTLDBDQUFFLFFBQVEsMENBQUUsS0FBSyxRQUNoQyxLQUFLLENBQUMsU0FBUywwQ0FBRSxRQUFRLENBQzFCLENBQUM7WUFFRixPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgZnJvbSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTWVzaFRvU3ZnV29ya2VyUGF5bG9hZCB9IGZyb20gJy4vZXh0ZXJuYWwtaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBNZXNoVG9Tdmcge1xuICBwdWJsaWMgcnVuKGlucHV0JDogT2JzZXJ2YWJsZTxNZXNoVG9TdmdXb3JrZXJQYXlsb2FkPik6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoW2Zyb20oaW1wb3J0KCdtZXNoLXRvLXN2ZycpKSwgaW5wdXQkXSkucGlwZShcbiAgICAgIG1hcCgoW3dhc20sIGlucHV0XSkgPT4ge1xuICAgICAgICBjb25zdCB3YXNtU3ZnID0gd2FzbS5tZXNoX3RvX3N2Z19saW5lcyhcbiAgICAgICAgICBpbnB1dC5zb3VyY2VXaWR0aCxcbiAgICAgICAgICBpbnB1dC5zb3VyY2VIZWlnaHQsXG4gICAgICAgICAgaW5wdXQubWVzaC5pbmRpY2VzLFxuICAgICAgICAgIGlucHV0Lm1lc2gucG9zaXRpb25zLFxuICAgICAgICAgIGlucHV0Lm1lc2gubm9ybWFscyxcbiAgICAgICAgICBpbnB1dC53aXJlZnJhbWU/LmluZGljZXMsXG4gICAgICAgICAgaW5wdXQud2lyZWZyYW1lPy5wb3NpdGlvbnMsXG4gICAgICAgICAgaW5wdXQuc2NlbmVWaWV3TWF0cml4LFxuICAgICAgICAgIGlucHV0LnNjZW5lUHJvamVjdGlvbk1hdHJpeCxcbiAgICAgICAgICBpbnB1dC5tZXNoV29ybGRNYXRyaXgsXG4gICAgICAgICAgaW5wdXQuc3ZnQ29uZmlnPy53aWR0aCxcbiAgICAgICAgICBpbnB1dC5zdmdDb25maWc/LmhlaWdodCxcbiAgICAgICAgICBpbnB1dC5zdmdDb25maWc/Lm1hcmdpbixcbiAgICAgICAgICBpbnB1dC5zdmdDb25maWc/LnZpc2libGU/LnN0cm9rZVdpZHRoLFxuICAgICAgICAgIGlucHV0LnN2Z0NvbmZpZz8udmlzaWJsZT8uY29sb3IsXG4gICAgICAgICAgaW5wdXQuc3ZnQ29uZmlnPy5vYnNjdXJlZCA9PT0gbnVsbCxcbiAgICAgICAgICBpbnB1dC5zdmdDb25maWc/Lm9ic2N1cmVkPy5zdHJva2VXaWR0aCxcbiAgICAgICAgICBpbnB1dC5zdmdDb25maWc/Lm9ic2N1cmVkPy5jb2xvcixcbiAgICAgICAgICBpbnB1dC5zdmdDb25maWc/LmZpdExpbmVzLFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB3YXNtU3ZnO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxufVxuIl19