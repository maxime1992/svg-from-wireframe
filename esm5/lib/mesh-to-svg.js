import { __read } from "tslib";
import { combineLatest, from } from 'rxjs';
import { map } from 'rxjs/operators';
var MeshToSvg = /** @class */ (function () {
    function MeshToSvg() {
    }
    MeshToSvg.prototype.run = function (input$) {
        return combineLatest([from(import('mesh-to-svg')), input$]).pipe(map(function (_a) {
            var _b = __read(_a, 2), wasm = _b[0], input = _b[1];
            var _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
            var wasmSvg = wasm.mesh_to_svg_lines(input.sourceWidth, input.sourceHeight, input.mesh.indices, input.mesh.positions, input.mesh.normals, (_c = input.wireframe) === null || _c === void 0 ? void 0 : _c.indices, (_d = input.wireframe) === null || _d === void 0 ? void 0 : _d.positions, input.sceneViewMatrix, input.sceneProjectionMatrix, input.meshWorldMatrix, (_e = input.svgConfig) === null || _e === void 0 ? void 0 : _e.width, (_f = input.svgConfig) === null || _f === void 0 ? void 0 : _f.height, (_g = input.svgConfig) === null || _g === void 0 ? void 0 : _g.margin, (_j = (_h = input.svgConfig) === null || _h === void 0 ? void 0 : _h.visible) === null || _j === void 0 ? void 0 : _j.strokeWidth, (_l = (_k = input.svgConfig) === null || _k === void 0 ? void 0 : _k.visible) === null || _l === void 0 ? void 0 : _l.color, ((_m = input.svgConfig) === null || _m === void 0 ? void 0 : _m.obscured) === null, (_p = (_o = input.svgConfig) === null || _o === void 0 ? void 0 : _o.obscured) === null || _p === void 0 ? void 0 : _p.strokeWidth, (_r = (_q = input.svgConfig) === null || _q === void 0 ? void 0 : _q.obscured) === null || _r === void 0 ? void 0 : _r.color, (_s = input.svgConfig) === null || _s === void 0 ? void 0 : _s.fitLines);
            return wasmSvg;
        }));
    };
    return MeshToSvg;
}());
export { MeshToSvg };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzaC10by1zdmcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly93aXJlZnJhbWUtdG8tc3ZnLyIsInNvdXJjZXMiOlsibGliL21lc2gtdG8tc3ZnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHckM7SUFBQTtJQThCQSxDQUFDO0lBN0JRLHVCQUFHLEdBQVYsVUFBVyxNQUEwQztRQUNuRCxPQUFPLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDOUQsR0FBRyxDQUFDLFVBQUMsRUFBYTtnQkFBYixrQkFBYSxFQUFaLFlBQUksRUFBRSxhQUFLOztZQUNmLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FDcEMsS0FBSyxDQUFDLFdBQVcsRUFDakIsS0FBSyxDQUFDLFlBQVksRUFDbEIsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQ2xCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUNwQixLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sUUFDbEIsS0FBSyxDQUFDLFNBQVMsMENBQUUsT0FBTyxRQUN4QixLQUFLLENBQUMsU0FBUywwQ0FBRSxTQUFTLEVBQzFCLEtBQUssQ0FBQyxlQUFlLEVBQ3JCLEtBQUssQ0FBQyxxQkFBcUIsRUFDM0IsS0FBSyxDQUFDLGVBQWUsUUFDckIsS0FBSyxDQUFDLFNBQVMsMENBQUUsS0FBSyxRQUN0QixLQUFLLENBQUMsU0FBUywwQ0FBRSxNQUFNLFFBQ3ZCLEtBQUssQ0FBQyxTQUFTLDBDQUFFLE1BQU0sY0FDdkIsS0FBSyxDQUFDLFNBQVMsMENBQUUsT0FBTywwQ0FBRSxXQUFXLGNBQ3JDLEtBQUssQ0FBQyxTQUFTLDBDQUFFLE9BQU8sMENBQUUsS0FBSyxFQUMvQixPQUFBLEtBQUssQ0FBQyxTQUFTLDBDQUFFLFFBQVEsTUFBSyxJQUFJLGNBQ2xDLEtBQUssQ0FBQyxTQUFTLDBDQUFFLFFBQVEsMENBQUUsV0FBVyxjQUN0QyxLQUFLLENBQUMsU0FBUywwQ0FBRSxRQUFRLDBDQUFFLEtBQUssUUFDaEMsS0FBSyxDQUFDLFNBQVMsMENBQUUsUUFBUSxDQUMxQixDQUFDO1lBRUYsT0FBTyxPQUFPLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFDSCxnQkFBQztBQUFELENBQUMsQUE5QkQsSUE4QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBmcm9tLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBNZXNoVG9TdmdXb3JrZXJQYXlsb2FkIH0gZnJvbSAnLi9leHRlcm5hbC1pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIE1lc2hUb1N2ZyB7XG4gIHB1YmxpYyBydW4oaW5wdXQkOiBPYnNlcnZhYmxlPE1lc2hUb1N2Z1dvcmtlclBheWxvYWQ+KTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gY29tYmluZUxhdGVzdChbZnJvbShpbXBvcnQoJ21lc2gtdG8tc3ZnJykpLCBpbnB1dCRdKS5waXBlKFxuICAgICAgbWFwKChbd2FzbSwgaW5wdXRdKSA9PiB7XG4gICAgICAgIGNvbnN0IHdhc21TdmcgPSB3YXNtLm1lc2hfdG9fc3ZnX2xpbmVzKFxuICAgICAgICAgIGlucHV0LnNvdXJjZVdpZHRoLFxuICAgICAgICAgIGlucHV0LnNvdXJjZUhlaWdodCxcbiAgICAgICAgICBpbnB1dC5tZXNoLmluZGljZXMsXG4gICAgICAgICAgaW5wdXQubWVzaC5wb3NpdGlvbnMsXG4gICAgICAgICAgaW5wdXQubWVzaC5ub3JtYWxzLFxuICAgICAgICAgIGlucHV0LndpcmVmcmFtZT8uaW5kaWNlcyxcbiAgICAgICAgICBpbnB1dC53aXJlZnJhbWU/LnBvc2l0aW9ucyxcbiAgICAgICAgICBpbnB1dC5zY2VuZVZpZXdNYXRyaXgsXG4gICAgICAgICAgaW5wdXQuc2NlbmVQcm9qZWN0aW9uTWF0cml4LFxuICAgICAgICAgIGlucHV0Lm1lc2hXb3JsZE1hdHJpeCxcbiAgICAgICAgICBpbnB1dC5zdmdDb25maWc/LndpZHRoLFxuICAgICAgICAgIGlucHV0LnN2Z0NvbmZpZz8uaGVpZ2h0LFxuICAgICAgICAgIGlucHV0LnN2Z0NvbmZpZz8ubWFyZ2luLFxuICAgICAgICAgIGlucHV0LnN2Z0NvbmZpZz8udmlzaWJsZT8uc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgaW5wdXQuc3ZnQ29uZmlnPy52aXNpYmxlPy5jb2xvcixcbiAgICAgICAgICBpbnB1dC5zdmdDb25maWc/Lm9ic2N1cmVkID09PSBudWxsLFxuICAgICAgICAgIGlucHV0LnN2Z0NvbmZpZz8ub2JzY3VyZWQ/LnN0cm9rZVdpZHRoLFxuICAgICAgICAgIGlucHV0LnN2Z0NvbmZpZz8ub2JzY3VyZWQ/LmNvbG9yLFxuICAgICAgICAgIGlucHV0LnN2Z0NvbmZpZz8uZml0TGluZXMsXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHdhc21Tdmc7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG59XG4iXX0=